<?xml version="1.0" encoding="UTF-8"?>
<minor-lib>
  <math>
    <func-list>
      <function>
        <name>mvec2set</name>
        <overview>Set components of a 2D vector.</overview>
        <syntax>void mvec2set(tvector2 * out, float x, float y);</syntax>
      </function>
      <function>
        <name>mvec2add</name>
        <overview>Adds two 2D vectors.</overview>
        <syntax>void mvec2add(tvector2 * out, const tvector2 * v1, const tvector2 * v2);</syntax>
      </function>
      <function>
        <name>mvec2sub</name>
        <overview>Subtracts two 2D vectors.</overview>
        <syntax>void mvec2sub(tvector2 * out, const tvector2 * v1, const tvector2 * v2);</syntax>
      </function>
      <function>
        <name>mvec2ccw</name>
        <overview>Retruns the z-component by taking the cross product of two 2D vectors.</overview>
        <syntax>float mvec2ccw(const tvector2 * v1, const tvector2 * v2);</syntax>
      </function>
      <function>
        <name>mvec2dot</name>
        <overview>Determines the dot product of two 2D vectors.</overview>
        <syntax>float mvec2dot(const tvector2 * v1, const tector2 * v2);</syntax>
      </function>
      <function>
        <name>mec2reflect</name>
        <overview>Returns reflected 2D vector to a normal.</overview>
        <syntax>void mvec2reflect(tvector2 * out, const tvector2 * vec, const tvector2 * normal);</syntax>
      </function>
      <function>
        <name>mvec2refract</name>
        <overview>Compute the direction of a refracted 2D vector.</overview>
        <syntax>void mvec2refract(tvector2  * out, const tvector2 * vec, const tvector2 * normal, float ratio);</syntax>
      </function>
      <function>
        <name>mvec2lerp</name>
        <overview>Performs a linear interpolation between two 2D vectors.</overview>
        <syntax>void mvec2lerp(tvector2 * out, const tvector2 * v1, const tvector2 * v2, float t);</syntax>
      </function>
      <function>
        <name>mvec2len</name>
        <overview>Returns the length of a 2D vector.</overview>
        <syntax>float mbec2len(const tvector2 * len);</syntax>
      </function>
      <function>
        <name>mvec2len2</name>
        <overview>Returns the square of the length of a 2D vector.</overview>
        <syntax>float mbec2len(const tvector2 * len);</syntax>
      </function>
      <function>
        <name>mvec2dist</name>
        <overview>Returns the distance between two 2D vector.</overview>
        <syntax>float mvec2dist(const tvector2 * v1, const tvector2 * v2);</syntax>
      </function>
      <function>
        <name>mvec2dist2</name>
        <overview>Returns the square of the distance of a two 2D vectors.</overview>
        <syntax>float mvec2dist2(const tvector2 * v1, const tvector2 * v2);</syntax>
      </function>
      <function>
        <name>mvec2norm</name>
        <overview>Returns the normalizaed version of a 2D vector.</overview>
        <syntax>void mvec2norm(tvetor2 * out, const tvector2 * vec);</syntax>
      </function>
      <function>
        <name>mvec2scale</name>
        <overview>Scales a 2D vector.</overview>
        <syntax>float mvec2dist(const tvector2 * v1, const tvector2 * v2);</syntax>
      </function>
      <function>
        <name>mvec2max</name>
        <overview>Returns a 2D vector that is made up of the largest components of two 2D vectors.</overview>
        <syntax>void mvec2max(tvector2 * out, const tvetor2 * v1, const tvector2 * v2);</syntax>
      </function>
      <function>
        <name>mvec2min</name>
        <overview>Returns a 2D vector that is made up of the smallest components of two 2D vectors.</overview>
        <syntax>void mvec2min(tvector2 * out, const tvector2 * v1, const tvector2 * v2);</syntax>
      </function>
      <function>
        <name>mvec2hermite</name>
        <overview>Performs a Hermite spline interpolation, using the specified 2D vectors.</overview>
        <syntax>void mvec2hermite(tvector2 * out, const tvector2 * v1, const tvector2 vt1, const tvector2 * v2, const tvector2 * vt2, float w, float t, float b);</syntax>
        <remarks>w - weight, t - tension, b - bias</remarks>
      </function>
      <function>
        <name>mvec2catmull</name>
        <overview>Performs a Catmull-Rom interpolation, using the specified 2D vectors.</overview>
        <syntax>void mvec2catmull(tvector2 * out, const tvector2 * v1, const tvector2 * v2, const tvector2 * v3, const tvector2 * v4, float f);</syntax>
      </function>
      <function>
        <name>mvec2bary</name>
        <overview>Returns a point in Barycentric coordinates, using the specified 2D vectors.</overview>
        <syntax>void mvec2bary(tvector2 out, const tvector2 * v1, const tvector2 * v2, const tvector2 * v3, float f, float g);</syntax>
      </function>
      <function>
        <name>mvec2rot</name>
        <overview>Performs a 2D vector rotation by a given angle.</overview>
        <syntax>void mvec2rot(tvector2 * out, const tvector2 * vec, float angle);</syntax>
      </function>
      <function>
        <name>mec2transf</name>
        <overview>Transforms a 2D vector by a given 4x4 matrix. Returns 4D vector.</overview>
        <syntax>void mvec2transf(tvector4 * out, const tvector2 * vec, const tmatrix44 * mtx);</syntax>
      </function>
      <function>
        <name>mvec2transf2</name>
        <overview>Transforms a 2D vector by a given 3x3 matrix. Returns 2D vector.</overview>
        <syntax>void mvec2transf2(tvector2 * out, const tvector2 * vec, const tmatrix33 * mtx);</syntax>
      </function>
      <function>
        <name>mvec2inv</name>
        <overview>Returns the inverted 2D vector.</overview>
        <syntax>void mvec2inv(tvector2 * out, const tvector2 * vec);</syntax>
      </function>
      <function>
        <name>mvec2neg</name>
        <overview>Negate the direction of a 2D vector.</overview>
        <syntax>void mvec2neg(tvector2 * out, const tvector2 * vec);</syntax>
      </function>
      <function>
        <name>mvec2eq</name>
        <overview>Check whether two given 2D vectors are almost equal.</overview>
        <syntax>bool mvec2eq(const tvector2 * v1, const tvector2 * v2);</syntax>
      </function>
      <function>
        <name>mvec2quad</name>
        <overview>Performs a quatradic interpolation, using the specified 2D vectors.</overview>
        <syntax>void mvec2quad(tvector2 * out, const tvector2 * v1, const tvector2 * v2, const tvector2 * v3, float f);</syntax>
        <remarks>f  - factor</remarks>
      </function>
      <function>
        <name>mvec2cubic</name>
        <overview>Performs a cubic interpolation, using the speciied 2D vectors.</overview>
        <syntax>void mvec2cubic(tvector2 * out, const tvector2 * v1, const tvector2 * v2, const tvector2 * v3, float f);</syntax>
        <remarks>f - factor</remarks>
      </function>
      <function>
        <name>mvec2sqrp</name>
        <overview>Performs a square interpolation, using the specified 2D vectors.</overview>
        <syntax>void mvec2sqrp(tvector2 * out, const tvector2 * v1, cosnt tvector2 * v2, float f);</syntax>
        <remarks>f - factor</remarks>
      </function>
      <function>
        <name>mvec2cosp</name>
        <overview>Perfroms a cosine interpolation, using the specified 2D vectors.</overview>
        <syntax>void mvec2cosp(tvector2 * out, tvector2 * v1, const tvector2 * v2, float f);</syntax>
        <remarks>f - factor</remarks>
      </function>
      <function>
        <name>mvec3add</name>
        <overview>Adds two 3D vectors.</overview>
        <syntax>void mvec3add(tvector3 * out, const tvector3 * v1, const tector3 * v2);</syntax>
      </function>
      <function>
        <name>mec3sub</name>
        <overview>Subtracts two 3D vectos.</overview>
        <syntax>void mvec3sub(tvector3 * out, const tvector3 * v1, const tvector3 * v2);</syntax>
      </function>
      <function>
        <name>mvec3cross</name>
        <overview>Determines the cross-product of two 3D vectors.</overview>
        <syntax>void mvec3cross(tvector3 * out, const tvector3 * v1, const tvector3 * v2);</syntax>
      </function>
      <function>
        <name>mvec3dot</name>
        <overview>Determines the dot product of two 3D vectors.</overview>
        <syntax>float mvec3dot(const tvector3 * v1, const tvector3 * v2);</syntax>
      </function>
      <function>
        <name>mvec3reflect</name>
        <overview>Returns reflected 3D vector to a normal.</overview>
        <syntax>void mvec3reflect(tvector3 * out, const tvector3 * dir, const tvector3 * norm);</syntax>
      </function>
      <function>
        <name>mvec3refract</name>
        <overview>Compute the direction of a refracted 3D vector.</overview>
        <syntax>void mvec3reract(tvector3 * out, const tvector3 * dir, const tvector3 * norm, float ratio);</syntax>
      </function>
      <function>
        <name>mvec3lerp</name>
        <overview>Performs a linear intepolation between two 3D vectors.</overview>
        <syntax>void mvec3lerp(tvector3 * out, const tvector3 * v1, const tvector3 * v2);</syntax>
      </function>
      <function>
        <name>mvec3len</name>
        <overview>Returns the length of a 3D vector.</overview>
        <syntax>float mvec3len(const tvector3 * vec);</syntax>
      </function>
      <function>
        <name>mvec2len2</name>
        <overview>Returns the square of the length of a 3D vector.</overview>
        <syntax>float mvec3len2(const tvector3 * vec);</syntax>
      </function>
      <function>
        <name>mvec3dist</name>
        <overview>Returns the distance between two 3D vectors.</overview>
        <syntax>float mvec3dist(const tvector3 * v1, const tvector3 * v2);</syntax>
      </function>
      <function>
        <name>mvec3dist2</name>
        <overview>Reurns the square of the distance of a two 3D vectors.</overview>
        <syntax>float mvec3dist2(const tvector3 * v1, const tvector3 * v2);</syntax>
      </function>
      <function>
        <name>mvec3norm</name>
        <overview>Returns the normalized version of a 3D vector.</overview>
        <syntax>void mvec3norm(tvector3 * out, const tvector3 * vec);</syntax>
      </function>
      <function>
        <name>mvec3scale</name>
        <overview>Scales a 3D vector.</overview>
        <syntax>void mvec3scale(tvector3 * out, const tvector3 * vec, float val);</syntax>
      </function>
      <function>
        <name>mvec3set</name>
        <overview>Set components of a 3D vector.</overview>
        <syntax>void mvec3set(tvector3 * out, float x, float y, float z);</syntax>
      </function>
      <function>
        <name>mvec3max</name>
        <overview>Returns a 3D vector that is made up of the largest components of two 3D vectors.</overview>
        <syntax>void mvec3max(tvector3 * out, const tvector3 * v1, const tector3 * v2);</syntax>
      </function>
      <function>
        <name>mvec3min</name>
        <overview>Returns a 3D vector that is made up of the smallest components o two 3D vectors.</overview>
        <syntax>void mvec3min(tvector3 * out, const tvector3 * v1, const tvector3 * v2);</syntax>
      </function>
      <function>
        <name>mvec3hermite</name>
        <overview>Performs a Hermite spline intepolation, using the specified 3D vectors.</overview>
        <syntax>void mvec3hermite(tvector3 * out, const tvector3 * v1, const tvector3 vt1, const tvector3 * v2, const tvector3 * vt2, float w, float t, float b);</syntax>
        <remarks>w - weight, t - tension, b - bias</remarks>
      </function>
      <function>
        <name>mvec3catmull</name>
        <overview>Performs a Catmull-Rom interpolation, using the specified 3D vectors.</overview>
        <syntax>void mvec3catmull(tvector3 * out, const tvecor3 * v1, const tvector3 * v2, cont tvector3 * v3, const tvector3 * v4, float w);</syntax>
      </function>
      <function>
        <name>mvec3bary</name>
        <overview>Returns a point in Barycentric coordinates, using the specified 3D vectors.</overview>
        <syntax>void mvec3bary(tvector3 * out, const tvector3 * v1, const tvector3 * v2, const tvector3 * v3, float f, float g);</syntax>
      </function>
      <function>
        <name>mvec3transf</name>
        <overview>Transforms a 3D vector by a given 4x4 matrix. Returns 4D vector.</overview>
        <syntax>void mvec3transf(tvector4 * out, const tvector3 * vec, const tmatrix44 * mtx);</syntax>
      </function>
      <function>
        <name>mvec3transf3</name>
        <overview>Transforms a 3D vector by a gien 4x4 matrix. Returns a 3D vector.</overview>
        <syntax>void mvec3transf3(tvector3 * out, const tvector3 * vec, const tmatrix44 * mtx);</syntax>
      </function>
      <function>
        <name>mvec3proj</name>
        <overview>Projects a 3D vector from object space into screen space.</overview>
        <syntax>void mvec3proj(tector3 * out, tvecto3 * proj);</syntax>
      </function>
      <function>
        <name>mvec3unproj</name>
        <overview>Projects a 3D vector from screen space into object space.</overview>
        <syntax>void mvec3unproj(tvector3 * out, tvector3 * proj);</syntax>
      </function>
      <function>
        <name>mvec3inv</name>
        <overview>Returns the inverted 3D vector.</overview>
        <syntax>void mvec3inv(tvector3 * out, const tvecor3 * vec);</syntax>
      </function>
      <function>
        <name>mvec3neg</name>
        <overview>Negate the direction of a 3D vector.</overview>
        <syntax>void mvec3neg(tvector3 * out, const tvector3 * vec);</syntax>
      </function>
      <function>
        <name>mvec3eq</name>
        <overview>Check whether two gien 3D vectors are almost equal.</overview>
        <syntax>bool mvec3eq(const tvector3 * v1, const tvectro3 * v2);</syntax>
      </function>
      <function>
        <name>mvec3quad</name>
        <overview>Performs a quatratic interpolation, using the specified 3D vectors.</overview>
        <syntax>void mvec3quad(tvector3 * out, const tvector3 * v1, const tvector3 * v2, const tvector3 * v3, float f);</syntax>
        <remarks>f - factor</remarks>
      </function>
      <function>
        <name>mvec3cubic</name>
        <overview>Performs a cubic inerpolation, using the specified 3D vectors.</overview>
        <syntax>void mvec3cubic(tvector3 * out, const tvector3 * v1, const tvector3 * v2, const tvector3 * v3, const tector3 * v4, flaot f);</syntax>
        <remarks>f - factor</remarks>
      </function>
      <function>
        <name>mvec3sqrp</name>
        <overview>Performs a square interpolation, using the specified 3D vectors.</overview>
        <syntax>void mvec3sqrp(tvector3 * out, const tvector3 * v1, const tvector3 * v2, float f);</syntax>
        <remarks>f - factor</remarks>
      </function>
      <function>
        <name>mvec3cosp</name>
        <overview>Performs a cosine interpolation, using the specified 3D vectors.</overview>
        <syntax>void mvec3cosp(tvector3 * out, const tvector3 * v1, const tvector3 * v2, float f);</syntax>
        <remarks>f - factor</remarks>
      </function>
      <function>
        <name>mvec4add</name>
        <overview>Adds two 4D vectors.</overview>
        <syntax>void mvec4add(tvector4 * out, const tvector4 * v1, const tvector4 * v2);</syntax>
      </function>
      <function>
        <name>mvec4sub</name>
        <overview>Subtracts two 4D vectors.</overview>
        <syntax>void mvec4sub(tvector4 * out, const tvector4 * v1, const tvector4 * v2);</syntax>
      </function>
      <function>
        <name>mvec4cross</name>
        <overview>Determines the cross-product of two 4D vectors.</overview>
        <syntax>void mvec4cross(tvector4 * out, const tvector4 * v1, const tvector4 * v2);</syntax>
      </function>
      <function>
        <name>mvec4dot</name>
        <overview>Determines the dot product of two 4D vectors.</overview>
        <syntax>float mvec4dot(const tvector4 * v1, const tvector4 * v2);</syntax>
      </function>
      <function>
        <name>mvec4reflect</name>
        <overview>Returns reflected 4D vector to a normal.</overview>
        <syntax>void mvec4reflect(tvector4 * out, const tvector4 * dir, const tvector4 * norm);</syntax>
      </function>
      <function>
        <name>mvec4refract</name>
        <overview>Compute the direction of a refracted 4D vector.</overview>
        <syntax>void mvec4refract(tvector4 * out, const tvector4 * dir, const tvector4 * norm, float ratio);</syntax>
      </function>
      <function>
        <name>mvec4lerp</name>
        <overview>Performs a linear interpolation between two 4D vectors.</overview>
        <syntax>void mvec4lerp(tvector4 * out, const tvector4 * v1, const tvector4 * v2, float t);</syntax>
      </function>
      <function>
        <name>mvec4len</name>
        <overview>Returns the length of a 4D vector.</overview>
        <syntax>float mvec4len(const tvector4 * vec);</syntax>
      </function>
      <function>
        <name>mvec4len2</name>
        <overview>Returns the square of the length of a 4D vector.</overview>
        <syntax>float mvec4len2(const tvector4 * vec);</syntax>
      </function>
      <function>
        <name>mvec4dist</name>
        <overview>Returns the distance between two 4D vectors.</overview>
        <syntax>float mvec4dist(const tvector4 * v1, const tvector4 * v2);</syntax>
      </function>
      <function>
        <name>mvec2dist2</name>
        <overview>Returns the square of the distance of a two 4D vectors.</overview>
        <syntax>float mvec4dist2(const tvector4 * v1, const tvector4 * v2);</syntax>
      </function>
      <function>
        <name>mvec4norm</name>
        <overview>Returns the normalized version of a 4D vector.</overview>
        <syntax>void mvec4norm(tvector4 * out, const tvector4 * vec);</syntax>
      </function>
      <function>
        <name>mvec4set</name>
        <overview>Set components of a 4D vector.</overview>
        <syntax>void mvec4set(tvector4 * out, float x, float y, float z, float w);</syntax>
      </function>
      <function>
        <name>mvec4scale</name>
        <overview>Scales a 4D vector.</overview>
        <syntax>void mvec4scale(tvector4 * out, const tvetor4 * vec, float val);</syntax>
      </function>
      <function>
        <name>mvec4max</name>
        <overview>Returns a 4D vector that is made up of the larest components of to 4D vectors.</overview>
        <syntax>vod mvec4max(tvector4 * out, const tvector4 * v1, cosnt tvector4 * v2);</syntax>
      </function>
      <function>
        <name>mvec4min</name>
        <overview>Returns a 4D vector that is made up of the smallest components of two 4D vectors.</overview>
        <syntax>void mvec4min(tvector4 * out, cosnt tvector4 * v1, const tvector4 * v2);</syntax>
      </function>
      <function>
        <name>mvec4hermite</name>
        <overview>Performs a Hermite spline interpolation, using the specified 4D vectors.</overview>
        <syntax>void mvec4hermite(tvector4 * out, const tvector4 * v1, const tvector4 * vt1, const tvector4 * v2, const tvector4 * v2, const tvector4 * vt2, float w, float t, float b);</syntax>
        <remarks>w - weight, t - tension, b - bias</remarks>
      </function>
      <function>
        <name>mvec4catmull</name>
        <overview>Performs a Catmull-Rom interpolation, using the specified 4D vectors.</overview>
        <syntax>void mvec4catmull(tvector4 * out, const tvector4 * v1, const tvector4 * v2, const tvector4 * v3, const tvector4 * v4, float w);</syntax>
      </function>
      <function>
        <name>mvec4bary</name>
        <overview>Returns a point in Barycentric coordinates, using the specified 4D vectors.</overview>
        <syntax>void mvec4bary(tvector4 * out, const tvector4 * v1, const tvector4 * v2, const tvector4 * v3, float f, float g);</syntax>
      </function>
      <function>
        <name>mvec4transf</name>
        <overview>Transforms a 4D vector by a given 4x4 matrix.</overview>
        <syntax>void mvec4transf(tvector4 * out, const tvector4 * vec, const tmatrix44 * mtx);</syntax>
      </function>
      <function>
        <name>mvec4inv</name>
        <overview>Returns the inverted 4D vector.</overview>
        <syntax>void mvec4inv(vector4 * out, const tvector4 * vec);</syntax>
      </function>
      <function>
        <name>mvec4neg</name>
        <overview>Negate the direction of a 4D vector.</overview>
        <syntax>void mvec4neg(tvector4 * out, const tvector4 * vec);</syntax>
      </function>
      <function>
        <name>mvec4eq</name>
        <overview>Check whether two given 4D vectors are almost equal.</overview>
        <syntax>bool mvec4eq(const tvector4 * v1, const tvector4 * v2);</syntax>
      </function>
      <function>
        <name>mvec4quad</name>
        <overview>Performs a quatratic interpolation, using the specified 4D vectors.</overview>
        <syntax>void mvec4quad(tvector4 * out, const tvecor4 * v1, const tvecor4 * v2, const tvector * v3, float f);</syntax>
        <remarks>f - factor</remarks>
      </function>
      <function>
        <name>mvec4cubic</name>
        <overview>Performs a cubic interpolation, using the specified 4D vectors.</overview>
        <syntax>void mvec4cubic(tvector4 * out, const tvector4 * v1, const tvector4 * v2, const tvector4 * v3, const tvector4 * v4, float f);</syntax>
        <remarks>f - factor</remarks>
      </function>
      <function>
        <name>mvec4sqrp</name>
        <overview>Performs a square interpolation, using the specified 4D vectors.</overview>
        <syntax>void mvec4sqrp(tvector4 * out, const tvector4 * v1, cosnt tvector4 * v2, float f);</syntax>
        <remarks>f  - factor</remarks>
      </function>
      <function>
        <name>mvec4cosp</name>
        <overview>Performs a cosine interpolation, using the specified 4D vectors.</overview>
        <syntax>void mvec4cosp(tvector4 * out, const tvecotr4 * v1, cosnt tvector4 * v2, float f);</syntax>
        <remarks>f - factor</remarks>
      </function>
      <function>
        <name>mmtx33affine</name>
        <overview>Builds a 3D affine transformation matrix. NULL arguments ae treated as identity transformations.</overview>
        <syntax>void mmtx33affine(tmatrix33 * out, float scale, const tvector2 * rotcent, float angle, cosnt tvector2 trans);</syntax>
      </function>
      <function>
        <name>mmtx33mult</name>
        <overview>Determines the product of two matrices.</overview>
        <syntax>void mmtx33mult(tmatrix33 * out, const tmatrix33 * mtx1, const tmatrix33 * mtx2);</syntax>
      </function>
      <function>
        <name>mmtx33det</name>
        <overview>Returns the determinant of a matrix</overview>
        <syntax>float mmtx33det(const tmatrix33 * mtx);</syntax>
      </function>
      <function>
        <name>mmtx33trace</name>
        <overview>Return the trace of the 3x3 matrix (sum of the value along the diagonal).</overview>
        <syntax>float mmtx33trace(const tmatrix33 * mtx);</syntax>
      </function>
      <function>
        <name>mmtx33set</name>
        <overview>Set matrix components.</overview>
        <syntax>void mmtx33trace(tmatrix33 * out, const tvector3 * vec1, const tvector3 * vec2, const tvector3 * vec3);</syntax>
      </function>
      <function>
        <name>mmtx33lerp</name>
        <overview>Performs a linear interpolation between two matrices</overview>
        <syntax>void mmtx33lerp(tmatrix33 * out, const tmatrix33 * mtx1, const tmatrix33 * mtx2, float f);</syntax>
      </function>
      <function>
        <name>mmtx33copy</name>
        <overview>Copy matrix</overview>
        <syntax>void mmtx33copy(tmatrix33 * out, const tmatrix33 * mtx);</syntax>
      </function>
      <function>
        <name>mmtx33ident</name>
        <overview>Creates an identity matrix</overview>
        <syntax>void mmtx33ident(tmatrix33 * out);</syntax>
      </function>
      <function>
        <name>mmtx33isident</name>
        <overview>Determines if a matrix ia an identity matrix.</overview>
        <syntax>bool mmtx33isident(const tmatrix33 * mtx);</syntax>
      </function>
      <function>
        <name>mmtx33decomp</name>
        <overview>Breaks down a general transformation matrix into its scalar, rotational, and translational components.</overview>
        <syntax>void mmtx33decomp(tvector3 * scale, tvector3 * rot, tvector3 * trans, const tmatrix33 * mtx);</syntax>
      </function>
      <function>
        <name>mmtx33inv</name>
        <overview>Calculates the inverse of a matrix.</overview>
        <syntax>void mmtx33inv(tmatrix33 * out, const tmatrix33 * mtx);</syntax>
      </function>
      <function>
        <name>mmtx33scale</name>
        <overview>Build a matrix that scales along the x-axis and the y-axis.</overview>
        <syntax>void mmtx33scale(tmatrix33 * out, float x, float y);</syntax>
      </function>
      <function>
        <name>mmtx33rot</name>
        <overview>Builds a rotation matrix.</overview>
        <syntax>void mmtx33rot(tmatrix33 * out, float angle);</syntax>
      </function>
      <function>
        <name>mmtx33transp</name>
        <overview>Returns the matrix transpose of a matrix.</overview>
        <syntax>void mmtx33tansp(tmatrix33 * out, const tmatrix33 * mtx);</syntax>
      </function>
      <function>
        <name>mmtx33transl</name>
        <overview>Builds a matrix using the specified offsets.</overview>
        <syntax>void mmtx33transl(tmatrix33 * out, float x, float y);</syntax>
      </function>
      <function>
        <name>mmtx33reflect</name>
        <overview>Builds a matrix that reflets the coordinates system about a 2D plane.</overview>
        <syntax>void mmtx33reflect(tmatrix33 * out, const tvetor2 * axis, cosnt tvector2 * offset);</syntax>
      </function>
      <function>
        <name>mmtx44affine</name>
        <overview>Builds a 3D affine transformation matrix. NULL arguments are treated as identity transformations.</overview>
        <syntax>void mmtx44affine(tmatrix44 * out, float scale, const tvector3 * rotcenter, const tquaternion * rot, cosnt tvector3 * trans);</syntax>
      </function>
      <function>
        <name>mmtx44mult</name>
        <overview>Determines the product of two matrices.</overview>
        <syntax>void mmtx44mult(tmatrix44 * out, const tmatrix44 * mtx1, const tmatrix44 * mtx2);</syntax>
      </function>
      <function>
        <name>mmtx44lerp</name>
        <overview>Performs a linear interpolation between to matrices.</overview>
        <syntax>void mmtx44lerp(tmatrix44 * out, const tmarix44 * mtx1, const tmatrix44 * mtx2, float f);</syntax>
      </function>
      <function>
        <name>mmtx44det</name>
        <overview>Returns the determinant of a matrix.</overview>
        <syntax>float mmtx44det(const tmatrix44 * mtx);</syntax>
      </function>
      <function>
        <name>mmtx44trace</name>
        <overview>Returns the trace of the 4x4 matrix (sum of the values along the diagonal).</overview>
        <syntax>flaot mmtx44trace(const tmatrix44 * mtx);</syntax>
      </function>
      <function>
        <name>mmtx44ident</name>
        <overview>Creates an identity matrix.</overview>
        <syntax>oid mmtx44ident(tmatrix44 * mtx);</syntax>
      </function>
      <function>
        <name>mmtx44isident</name>
        <overview>Determines if a matrix is an identity matrix.</overview>
        <syntax>bool mmtx44isidentity(const tmatrix44 * mtx);</syntax>
      </function>
      <function>
        <name>mmtx44set</name>
        <overview>Set matrix components.</overview>
        <syntax>void mmtx44set(tmatrix44 * out, const tvector4 * row1, cosnt tvecor4 * row2, const tvector4 * row3, cosnt tvector4 * row4);</syntax>
      </function>
      <function>
        <name>mmtx44copy</name>
        <overview>Copy matrix.</overview>
        <syntax>void mmtx44copy(tmatrix44 * ot, const tmatrix44 * mtx);</syntax>
      </function>
      <function>
        <name>mmtx44inv</name>
        <overview>Calculates the inverse of a matrix.</overview>
        <syntax>void mmtx44inv(tmatrix44 * out, const tmatrix44 * mtx);</syntax>
      </function>
      <function>
        <name>mmtx44invaffine</name>
        <overview>Calcluates the inverse affine of a matrix.</overview>
        <syntax>void mmtx44invaffine(tmatrix44 * out, const tmatrix44 * out);</syntax>
      </function>
      <function>
        <name>mmtx44decomp</name>
        <overview>Beaks down a general 3D transformation matrix into its scalar, rotational , and translational components.</overview>
        <syntax>void mmtx44decomp(tvector3 * scale, tvecto3 * rot, tvector3 * tans, cosnt tmatrix44 * out);</syntax>
      </function>
      <function>
        <name>mmtx44scale</name>
        <overview>Builds a matrix that scales along the x-axis, the y-axis and the z-axis.</overview>
        <syntax>void mmtx44scale(tmatrix44 * out, float x, float y, float z);</syntax>
      </function>
      <function>
        <name>mmtx44rotx</name>
        <overview>Builds a matrix that rotates arond the x-axis.</overview>
        <syntax>void mmtx44rotx(tmatrix44 * out, float angle);</syntax>
      </function>
      <function>
        <name>mmtx44roty</name>
        <overview>Builds a matrix that rotates around the y-axis.</overview>
        <syntax>void mmtx44roty(tmatrix44 * out, float angle);</syntax>
      </function>
      <function>
        <name>mmtx44rotz</name>
        <overview>Builds a matrix that rotates around the z-axis.</overview>
        <syntax>void mmtx44rotz(tmatrix44 * out, float angle);</syntax>
      </function>
      <function>
        <name>mmtx44transp</name>
        <overview>Returns the matrix transpose of a matrix.</overview>
        <syntax>void mmtx44transp(tmatrix44 * out, const tmatrix44 * mtx);</syntax>
      </function>
      <function>
        <name>mmtx44transl</name>
        <overview>Builds a matrix using the specified offsets.</overview>
        <syntax>void mmtx44transl(tmatrix44 * out, float x, float y, float z);</syntax>
      </function>
      <function>
        <name>mmtx44reflect</name>
        <overview>Builds a matrix that reflects the coordinate system about a plane.</overview>
        <syntax>void mmtx44reflect(tmatrix44 * out, const tplane * plane);</syntax>
      </function>
      <function>
        <name>mmtx44shadow</name>
        <overview>Builds a matrix that flattens gemetry into a plane.</overview>
        <syntax>void mmtx44shadow(tmatrix44 * ut, const tvector3 * light, const tplane * plane);</syntax>
      </function>
      <function>
        <name>mmtx44persp</name>
        <overview>Builds a (left-handed) perpective projection matrix based on a field of view.</overview>
        <syntax>void mmtx44persp(tmatrix44 8 out, float w, float h, float zn, float zf);</syntax>
      </function>
      <function>
        <name>mmtx44perspfov</name>
        <overview>Builds a (left-handed) perspective projection matrix based on a field of view.</overview>
        <syntax>void mmtx44perspfov(tmatrix44 * out, float fovy, float aspect, float zn, float z);</syntax>
      </function>
      <function>
        <name>mmtx44ortho</name>
        <overview>Builds a let-handed orthographic projection matrix.</overview>
        <syntax>void mmtx44ortho(tmatrix44 * ou, float w, float h, foat zn, float zf);</syntax>
      </function>
      <function>
        <name>mmtx44lookat</name>
        <overview>Builds a left-handed, llok-at matrix.</overview>
        <syntax>void mmtx44lookat(tmatrix44 * out, const tvector4 * eye, const tvector3 * at, const tvector3 * up);</syntax>
      </function>
      <function>
        <name>mmtx44frustum</name>
        <overview>Builds a let-handed perspective projecion matrix.</overview>
        <syntax>void mmtx44frustum(tmatrix44 * out, float l, float r, flaot b, float t, float zn, float zf);</syntax>
      </function>
      <function>
        <name>mmtx44quat</name>
        <overview>Builds aquaternion from rotation matrix.</overview>
        <syntax>void mmtx44quat(tquaternion * out, cosnt tmatrix44 * mtx);</syntax>
      </function>
      <function>
        <name>mquatadd</name>
        <overview>Adds two quaternions.</overview>
        <syntax>void mquatadd(tquaternion * out, const tquaternion * q1, const tquaternion * q2);</syntax>
      </function>
      <function>
        <name>mquatsub</name>
        <overview>Subtracts two quaternions.</overview>
        <syntax>void mquatsub(tquaternion * out, consttquaternion * q1, cosnt tquaternion * q2);</syntax>
      </function>
      <function>
        <name>mquatdot</name>
        <overview>Returns the dot produt of two quaternions.</overview>
        <syntax>flaot mquatdot(const tquaternion * q1, const tquaternion * q2);</syntax>
      </function>
      <function>
        <name>mquatset</name>
        <overview>Set quaternion components.</overview>
        <syntax>void mquatset(tquaternion * out, float x, float y, float z, float w);</syntax>
      </function>
      <function>
        <name>mquatcopy</name>
        <overview>Copy quaternion.</overview>
        <syntax>void mquatcopy(tquaternion * out, cosnt tquaternion * q);</syntax>
      </function>
      <function>
        <name>mquatident</name>
        <overview>Returns the identity quaternion.</overview>
        <syntax>void mquatident(tquaternion * out);</syntax>
      </function>
      <function>
        <name>mquatisident</name>
        <overview>Deermines if a quaternion is an identity quaernion.</overview>
        <syntax>void mquatisident(const tquaternion * q);</syntax>
      </function>
      <function>
        <name>mquateq</name>
        <overview>Check whether two gien quaternions are almost equal.</overview>
        <syntax>void mquateq(const tquaternion * q1, const tquaternion * q2);</syntax>
      </function>
      <function>
        <name>mquatconj</name>
        <overview>Returns the conjugate of a quaternion.</overview>
        <syntax>void mquatconj(tquaternion * out, const tquaternion * q);</syntax>
      </function>
      <function>
        <name>mquatlen</name>
        <overview>Returns the length of a quaternion.</overview>
        <syntax>float mquatlen(const tquaternion * q);</syntax>
      </function>
      <function>
        <name>mquatlen2</name>
        <overview>Returns the square of the length of a quaternion.</overview>
        <syntax>float mquatlen2(cosnt tquaternion * q);</syntax>
      </function>
      <function>
        <name>mquatnorm</name>
        <overview>Compute a unit length quaternion.</overview>
        <syntax>void mquatnorm(tquaternion * out, const tquaternion * q);</syntax>
      </function>
      <function>
        <name>mquatmult</name>
        <overview>Multiplies two quaternions.</overview>
        <syntax>void mquatmult(tquaternion * out, const tquaternion * q1, const tquaternion * q2);</syntax>
      </function>
      <function>
        <name>mquatscale</name>
        <overview>Scales quaternion by value.</overview>
        <syntax>void mquatscale(tquaternion * out, const tquaternion * q, float scale);</syntax>
      </function>
      <function>
        <name>mquatinv</name>
        <overview>Conjugates and renorilzes a quaternion.</overview>
        <syntax>void mquatinv(tquaternion * out, const tquaternion * q);</syntax>
      </function>
      <function>
        <name>mquatbary</name>
        <overview>Returns a quaternion in barycentric coordinates.</overview>
        <syntax>void mquatbary(tquaternion * out, const tquaternion * q1, const tquaternion * q2, cosnt tquaternion * q3, float f, float g);</syntax>
      </function>
      <function>
        <name>mquatlerp</name>
        <overview>Performs a linear interpolation between two quaternions.</overview>
        <syntax>void mquatlerp(tquaternion * out, const tquaternion * q1, cosnst tquaternion * q2, float f);</syntax>
      </function>
      <function>
        <name>mquatslerp</name>
        <overview>Interpolates between two quaternions, using spherical linear interpolation.</overview>
        <syntax>void mquatslerp(tquaernion * out, const tquaternion * q1, cosnt tquaternion * q2, float f);</syntax>
      </function>
      <function>
        <name>mquatnlerp</name>
        <overview>Interpolates between two quaternions, using optimized spherical linear interpolation.</overview>
        <syntax>void mquatnlerp(tquaternion * out, const tquaternion * q1, const tquaternion * q2, float f);</syntax>
      </function>
      <function>
        <name>mquatsquad</name>
        <overview>Interpolates between quaternions, using spherical quadrangle interpolation.</overview>
        <syntax>void mquatsquad(tquaternion * out, const tquaternion * q1, const tquaternion * a, const tquaternion * b, const tquaternion * c, float f);</syntax>
      </function>
      <function>
        <name>mquatspline</name>
        <overview>Sets up control points for spherial quadrangle interpolation.</overview>
        <syntax>void mquatspline(tquaternion * out, const tquaternion * q1, cosnt tquaternion * m, const tquaternion * q2);</syntax>
      </function>
      <function>
        <name>mquatln</name>
        <overview>Calculates the natural logarithm,</overview>
        <syntax>void mquatln(tquaternion * out, const tquaternion * q);</syntax>
      </function>
      <function>
        <name>mquatexp</name>
        <overview>Calculates the exponential.</overview>
        <syntax>void mquatexp(tquaternion * out, const tquaternion * q);</syntax>
      </function>
      <function>
        <name>mquatmtx44</name>
        <overview>Builds a rotation matrix from a quaternion.</overview>
        <syntax>void mquatmtx44(tmarix44 * out, cosnt tquaternion * q);</syntax>
      </function>
      <function>
        <name>mquatangle</name>
        <overview>Returns rotation angle of a quaternion.</overview>
        <syntax>float mquatangle(const tquaternion * q);</syntax>
      </function>
      <function>
        <name>mquataxis</name>
        <overview>Returns axis specified by vector part o a quaternion.</overview>
        <syntax>void mquataxis(tvector3 * out, const tquaternion * quat);</syntax>
      </function>
      <function>
        <name>mquatrot</name>
        <overview>Rotates a quaternion using another quaternion.</overview>
        <syntax>void mquatrot(tquaernion * out, const tquaternion * q1, const tquaternion * q2);</syntax>
      </function>
      <function>
        <name>mquatrotvec3</name>
        <overview>Rotates 3D vector using quaternion (v, q, v).</overview>
        <syntax>void mquatrotvec3(tvector3 * out, const tquaternion * q, const tvector3 * v);</syntax>
      </function>
      <function>
        <name>mquatrotarc</name>
        <overview>Builds a quaternion or rotsting from vector v1 to vector v2.</overview>
        <syntax>void mquatrotarc(tquaternion * out, const tvector3 * v1, cosnt tvector3 * v2);</syntax>
      </function>
      <function>
        <name>mquatrotaxis</name>
        <overview>Builds a quaternion rom axis and rotation angle. (q, v, angle).</overview>
        <syntax>void mquatrotaxis(tquaternion * out, cosnt tvecor3 * v, float angle);</syntax>
      </function>
      <function>
        <name>mquatroteler</name>
        <overview>Builds a quaternion with the given Euler angles like yaw, pitch and roll.</overview>
        <syntax>void mquatroteuler(tquaternion * out, float yaw, float pitch, float roll);</syntax>
      </function>
      <function>
        <name>mquateuler</name>
        <overview>Returns a quaternion Euler angles like yaw, pitch and roll.</overview>
        <syntax>void mquateuler(tvector3 * out, const tquaternion * quat);</syntax>
      </function>
      <function>
        <name>mplaneset</name>
        <overview>Set plane components.</overview>
        <syntax>void planeset(tplane * out, float x, float y, float z, float w);</syntax>
      </function>
      <function>
        <name>mplanecopy</name>
        <overview>Copy a plane.</overview>
        <syntax>void mplanecopy(tplane * out, const tplane * p);</syntax>
      </function>
      <function>
        <name>mplanedot</name>
        <overview>Computes the dot product of a plane and a 4D vector.</overview>
        <syntax>float mplanedot(const tplane * p, cosnt tvector4 * v);</syntax>
      </function>
      <function>
        <name>mplanepts</name>
        <overview>Constructs a plane from three points.</overview>
        <syntax>void mplanepts(tplane * out, const tvector3 * p1, const tvector3 * p2, const tvector3 * p3);</syntax>
      </function>
      <function>
        <name>mplanenorm</name>
        <overview>Normalizes the plane coefficients so that the plane normal has unit length.</overview>
        <syntax>void mplanenorm(tplane * out, const tplane * p);</syntax>
      </function>
      <function>
        <name>mplanescale</name>
        <overview>Scale the plane with the given scaling factor.</overview>
        <syntax>void mplanescale(tplane * out, const tplane * p, float scale);</syntax>
      </function>
      <function>
        <name>mplaneinter</name>
        <overview>Finds the intersection between a plane and a line.</overview>
        <syntax>bool mplaneinter(tvector3 * out, tplane * p, const tvector3 * p1, cosnt tvector3 * p2);</syntax>
      </function>
    </func-list>
    <struct-list>
      <structure>
        <name>tvector2</name>
      </structure>
      <structure>
        <name>tvector3</name>
      </structure>
      <structure>
        <name>tvector4</name>
      </structure>
      <structure>
        <name>tmatrix33</name>
      </structure>
      <structure>
        <name>tmatrix44</name>
      </structure>
      <structure>
        <name>tquaternion</name>
      </structure>
      <structure>
        <name>tplane</name>
      </structure>
    </struct-list>
  </math>
</minor-lib>